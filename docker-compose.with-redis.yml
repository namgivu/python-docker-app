version: "3"
services:
  web:
    image: namgivu/friendlyhello:1.0 #MUST matched with value defined by $IMAGE_NAME_REMOTE @ s00_config.sh

    deploy:
      #run five instances of the image we uploaded in step 2 as a service called `web`, limiting each one to use, at most, 10% of the CPU (across all cores), and 50MB of RAM.
      replicas: 5
      resources:
        limits:
          cpus: "0.1"
          memory: 50M

      #immediately restart containers if one fails
      restart_policy:
        condition: on-failure

    ports: #map a port on the run-host to the container’s exposed-port
      - "5000:80" #MUST matched with value defined by $R_PORT:$E_PORT @ s00_config.sh

    networks: #instruct web’s containers to share port 80 via a load-balanced network called `webnet`
      - webnet

  redis:
    image: redis
    ports:
      - "6379:6379"
    volumes:
      - ./data:/data #lets the container access ./data (on the host i.e. host node) as /data (inside the Redis container)
                     #`redis` accesses directory './data' in the host’s file system as '/data' inside the container, which is where Redis stores data
    deploy:
      placement:
        constraints: [node.role == manager] #`placement key` ensuring that this service only ever runs on a swarm manager – never a worker
                                            #`redis` always runs on the manager node, so it’s always using the same filesystem
    networks:
      - webnet

networks: #define the `webnet` network with the default settings (which is a load-balanced overlay network)
  webnet:
